{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGif.js","GifApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","alert","type","value","onChange","target","placeholder","getGif","category","a","url","process","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGif","GifApp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEaA,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAAiB,EACxBC,mBAAS,IADe,mBACrDC,EADqD,KACzCC,EADyC,KAoB5D,OACE,sBAAMC,SAda,SAAAC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC7BT,EAAc,CACXG,GADU,mBAERF,KAELG,EAAc,KAEdM,MAAM,iCAKR,SACE,uBACEC,KAAK,OACLC,MAAOT,EACPU,SAtBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAsBnBG,YAAY,mB,+BC1BPC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCF,EAFlC,6BAFVG,oCAEU,SAGFC,MAAMF,GAHJ,cAGdG,EAHc,gBAIGA,EAAIC,OAJP,uBAIZC,EAJY,EAIZA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATlB,kBAabM,GAba,4CAAH,sDCANO,EAAc,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACvC,OACE,sBAAKc,UAAU,8DAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAc,IAAD,EACbf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAU,WACRxB,EAAOC,GACJwB,MAAK,SAAAd,GACJY,EAAS,CACPf,KAAMG,EACNU,SAAS,SAGd,CAACpB,IAEGqB,EDd0BI,CAAYzB,GAAhCa,EADwB,EAC7BN,KAAaa,EADgB,EAChBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,gBAAd,SAA+BhB,IAC7BoB,GACA,qBAAKJ,UAAU,mBAAf,SACE,qBAAKA,UAAU,YAAf,SAA2B,4BAG/B,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIC,SAMjB,oBAAIK,UAAU,WEOLU,EA5BA,WAAM,MAIiBzC,mBAAS,IAJ1B,mBAIZD,EAJY,KAIAD,EAJA,KAMnB,OACE,qCACE,mDACA,cAAC,EAAD,CACEA,cAAeA,EACfC,WAAYA,IAEd,uBACA,6BAEIA,EAAWyB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,YCZJ2B,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1065b033.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport const AddCategory = ({ setCategories, categories }) => {\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    if (inputValue.trim().length > 0) {\r\n      setCategories(\r\n        [inputValue,\r\n        ...categories]\r\n      )\r\n      setInputValue('')\r\n    } else {\r\n      alert('La busqueda no debe ir vacia')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={ handleInputChange}\r\n        placeholder=\"Busqueda...\"\r\n\r\n      />\r\n    </form>\r\n  )\r\n}\r\n","const api = process.env.REACT_APP_API\r\n\r\nexport const getGif = async (category) => {\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=12&api_key=${api}`\r\n  const res = await fetch(url)\r\n  const { data } = await res.json()\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n\r\n  return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn animate__delay-.500s\">\r\n      <img src={url} alt={title}/>\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGif } from '../hooks/useFetchGif'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n  const { data:images, loading } = useFetchGif(category)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"categoryTitle\">{category}</h3>\r\n      { loading && \r\n        <div className=\"contenedorLoader\">\r\n          <div className=\"lds-heart\"><div></div></div>\r\n        </div>\r\n      }\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(img => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n      <hr className=\"hr\"/>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from '../helpers/getGifs'\r\n\r\nexport const useFetchGif = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGif(category)\r\n      .then(img => {\r\n        setState({\r\n          data: img,\r\n          loading: false\r\n        })\r\n      })\r\n  }, [category])\r\n\r\n  return state\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifApp = () => {\r\n  // const handleAdd = () => {\r\n  //   setCategories(['Hunter', ...categories])\r\n  // }\r\n  const [categories, setCategories] = useState([])\r\n\r\n  return (\r\n    <>\r\n      <h1>Gif Search âš¡</h1>\r\n      <AddCategory\r\n        setCategories={setCategories}\r\n        categories={categories}\r\n      />\r\n      <hr/>\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n            <GifGrid\r\n              key={category}\r\n              category={category}\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifApp;\r\n","import GifApp from './GifApp'\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GifApp />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}